include_directories(lib)
include_directories(specs)

set(PASS YieldPass)
set(PASS_PATH ${CMAKE_BINARY_DIR}/codegen/lib${PASS}.so)

set(CLANG_PASS ClangPass)
set(CLANG_TOOL ClangPassTool)
set(CLANG_PASS_LIB ${CMAKE_BINARY_DIR}/clangpass/lib${CLANG_PASS}.so)
set(CLANG_TOOL_EXECUTABLE ${CMAKE_BINARY_DIR}/clangpass/${CLANG_TOOL})

find_package(Boost REQUIRED COMPONENTS context)

function(verify_target target)
    # message("Target: ${target}, sources: ${source_name}")

    if (APPLY_CLANG_TOOL)
        # here we prefix the actual source file name with '__tmp_' which will be generate by clang pass tool
        add_executable(${target} __tmp_${source_name})
    else()
        add_executable(${target} ${source_name})
    endif()
    add_dependencies(${target} runtime plugin_pass)
    target_include_directories(${target} PRIVATE ${CMAKE_SOURCE_DIR} ${CMAKE_SOURCE_DIR}/third_party)
    target_link_options(${target} PRIVATE ${CMAKE_ASAN_FLAGS})
    target_compile_options(${target} PRIVATE -fpass-plugin=${PASS_PATH} ${CMAKE_ASAN_FLAGS})
    target_link_libraries(${target} PRIVATE runtime ${PASS} gflags ${Boost_LIBRARIES})

    
    if (APPLY_CLANG_TOOL)
        # here we are applying clangpass to the ${source_name} file
        add_custom_command(
            OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/__tmp_${source_name}
            COMMAND ${CLANG_TOOL_EXECUTABLE}
                    -p=${CMAKE_BINARY_DIR}/compile_commands.json # passing compilation database, make sure CMAKE_EXPORT_COMPILE_COMMANDS flag is set
                    --replace-name=::std::atomic
                    --insert-name=LTestAtomic
                    ${CMAKE_CURRENT_SOURCE_DIR}/${source_name}
            DEPENDS ${CLANG_TOOL}
            COMMENT "Running Clang Pass Tool on ${source_name}"
        )

        # here we delete the temp file generated by previous command
        add_custom_command(
            TARGET ${target}
            POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E echo "Removing temporary file '${CMAKE_CURRENT_SOURCE_DIR}/__tmp_${source_name}' generated after building ${target}"
            COMMAND ${CMAKE_COMMAND} -E remove ${CMAKE_CURRENT_SOURCE_DIR}/__tmp_${source_name}
        )
    endif()
endfunction()

add_subdirectory(targets)
add_subdirectory(blocking)
